// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cache/cache.go
//
// Generated by this command:
//
//	mockgen -source=pkg/cache/cache.go -destination=mocks/mock_cacher.go -package=mocks ICacher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "campaigns/pkg/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICacher is a mock of ICacher interface.
type MockICacher struct {
	ctrl     *gomock.Controller
	recorder *MockICacherMockRecorder
	isgomock struct{}
}

// MockICacherMockRecorder is the mock recorder for MockICacher.
type MockICacherMockRecorder struct {
	mock *MockICacher
}

// NewMockICacher creates a new mock instance.
func NewMockICacher(ctrl *gomock.Controller) *MockICacher {
	mock := &MockICacher{ctrl: ctrl}
	mock.recorder = &MockICacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICacher) EXPECT() *MockICacherMockRecorder {
	return m.recorder
}

// GetActiveCampaignIds mocks base method.
func (m *MockICacher) GetActiveCampaignIds() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCampaignIds")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetActiveCampaignIds indicates an expected call of GetActiveCampaignIds.
func (mr *MockICacherMockRecorder) GetActiveCampaignIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCampaignIds", reflect.TypeOf((*MockICacher)(nil).GetActiveCampaignIds))
}

// GetCampaign mocks base method.
func (m *MockICacher) GetCampaign(id string) (models.Campaign, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaign", id)
	ret0, _ := ret[0].(models.Campaign)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCampaign indicates an expected call of GetCampaign.
func (mr *MockICacherMockRecorder) GetCampaign(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaign", reflect.TypeOf((*MockICacher)(nil).GetCampaign), id)
}

// GetRules mocks base method.
func (m *MockICacher) GetRules(id string) (models.TargetingRule, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRules", id)
	ret0, _ := ret[0].(models.TargetingRule)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRules indicates an expected call of GetRules.
func (mr *MockICacherMockRecorder) GetRules(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRules", reflect.TypeOf((*MockICacher)(nil).GetRules), id)
}
